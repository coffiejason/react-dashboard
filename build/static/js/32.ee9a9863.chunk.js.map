{"version":3,"sources":["auth/hooks/useUpdatePassword.ts","admin/pages/ProfilePassword.tsx"],"names":["updatePassword","a","oldPassword","newPassword","axios","put","data","ProfilePassword","snackbar","useSnackbar","t","useTranslation","useMutation","isUpdating","isLoading","mutateAsync","useUpdatePassword","formik","useFormik","initialValues","confirmPassword","validationSchema","Yup","min","size","required","oneOf","onSubmit","values","handleUpdatePassword","then","resetForm","success","catch","error","handleSubmit","noValidate","Card","CardHeader","title","CardContent","TextField","margin","fullWidth","name","label","type","id","autoComplete","disabled","value","onChange","handleChange","touched","Boolean","errors","helperText","CardActions","LoadingButton","loading","variant"],"mappings":"kRAGMA,EAAc,uCAAG,mCAAAC,EAAA,6DACrBC,EADqB,EACrBA,YACAC,EAFqB,EAErBA,YAFqB,SAOEC,IAAMC,IAAI,gBAAiB,CAChDH,cACAC,gBATmB,uBAObG,EAPa,EAObA,KAPa,kBAWdA,GAXc,2CAAH,sD,oBCsHLC,UA7GS,WACtB,IAAMC,EAAWC,cACTC,EAAMC,cAAND,EAER,EDCK,WACL,MAAmCE,YAAYZ,GAC/C,MAAO,CAAEa,WADT,EAAQC,UACwBd,eADhC,EAAmBe,aCFoBC,GAA/BH,EAAR,EAAQA,WAAYb,EAApB,EAAoBA,eAEdiB,EAASC,YAAU,CACvBC,cAAe,CACbjB,YAAa,GACbC,YAAa,GACbiB,gBAAiB,IAEnBC,iBAAkBC,IAAW,CAC3BpB,YAAaoB,MACVC,IAAI,EAAGb,EAAE,yBAA0B,CAAEc,KAAM,KAC3CC,SAASf,EAAE,gCACdP,YAAamB,MACVC,IAAI,EAAGb,EAAE,yBAA0B,CAAEc,KAAM,KAC3CC,SAASf,EAAE,gCACdU,gBAAiBE,MACdI,MAAM,CAACJ,IAAQ,gBAAiBZ,EAAE,qCAClCe,SAASf,EAAE,kCAEhBiB,SAAU,SAACC,GAAD,OACRC,EAAqBD,EAAO1B,YAAa0B,EAAOzB,gBAG9C0B,EAAoB,uCAAG,WAC3B3B,EACAC,GAF2B,SAAAF,EAAA,sDAI3BD,EAAe,CAAEE,cAAaC,gBAC3B2B,MAAK,WACJb,EAAOc,YACPvB,EAASwB,QAAQtB,EAAE,6CAEpBuB,OAAM,WACLzB,EAAS0B,MAAMxB,EAAE,yCAVM,2CAAH,wDAc1B,OACE,sBAAMiB,SAAUV,EAAOkB,aAAcC,YAAU,EAA/C,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,MAAO7B,EAAE,4BACrB,eAAC8B,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,OAAO,SACPjB,UAAQ,EACRkB,WAAS,EACTC,KAAK,cACLC,MAAOnC,EAAE,uCACToC,KAAK,WACLC,GAAG,cACHC,aAAa,mBACbC,SAAUpC,EACVqC,MAAOjC,EAAOW,OAAO1B,YACrBiD,SAAUlC,EAAOmC,aACjBlB,MACEjB,EAAOoC,QAAQnD,aAAeoD,QAAQrC,EAAOsC,OAAOrD,aAEtDsD,WAAYvC,EAAOoC,QAAQnD,aAAee,EAAOsC,OAAOrD,cAE1D,cAACuC,EAAA,EAAD,CACEC,OAAO,SACPjB,UAAQ,EACRkB,WAAS,EACTC,KAAK,cACLC,MAAOnC,EAAE,mCACToC,KAAK,WACLC,GAAG,cACHE,SAAUpC,EACVqC,MAAOjC,EAAOW,OAAOzB,YACrBgD,SAAUlC,EAAOmC,aACjBlB,MACEjB,EAAOoC,QAAQlD,aAAemD,QAAQrC,EAAOsC,OAAOpD,aAEtDqD,WAAYvC,EAAOoC,QAAQlD,aAAec,EAAOsC,OAAOpD,cAE1D,cAACsC,EAAA,EAAD,CACEC,OAAO,SACPjB,UAAQ,EACRkB,WAAS,EACTC,KAAK,kBACLC,MAAOnC,EAAE,uCACToC,KAAK,WACLC,GAAG,kBACHE,SAAUpC,EACVqC,MAAOjC,EAAOW,OAAOR,gBACrB+B,SAAUlC,EAAOmC,aACjBlB,MACEjB,EAAOoC,QAAQjC,iBACfkC,QAAQrC,EAAOsC,OAAOnC,iBAExBoC,WACEvC,EAAOoC,QAAQjC,iBAAmBH,EAAOsC,OAAOnC,qBAItD,cAACqC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAeZ,KAAK,SAASa,QAAS9C,EAAY+C,QAAQ,YAA1D,SACGlD,EAAE","file":"static/js/32.ee9a9863.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { useMutation } from \"react-query\";\r\n\r\nconst updatePassword = async ({\r\n  oldPassword,\r\n  newPassword,\r\n}: {\r\n  oldPassword: string;\r\n  newPassword: string;\r\n}) => {\r\n  const { data } = await axios.put(\"/api/password\", {\r\n    oldPassword,\r\n    newPassword,\r\n  });\r\n  return data;\r\n};\r\n\r\nexport function useUpdatePassword() {\r\n  const { isLoading, mutateAsync } = useMutation(updatePassword);\r\n  return { isUpdating: isLoading, updatePassword: mutateAsync };\r\n}\r\n","import Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport LoadingButton from \"@material-ui/lab/LoadingButton\";\r\nimport { useFormik } from \"formik\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport * as Yup from \"yup\";\r\nimport { useUpdatePassword } from \"../../auth/hooks/useUpdatePassword\";\r\nimport { useSnackbar } from \"../../core/contexts/SnackbarProvider\";\r\n\r\nconst ProfilePassword = () => {\r\n  const snackbar = useSnackbar();\r\n  const { t } = useTranslation();\r\n\r\n  const { isUpdating, updatePassword } = useUpdatePassword();\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      oldPassword: \"\",\r\n      newPassword: \"\",\r\n      confirmPassword: \"\",\r\n    },\r\n    validationSchema: Yup.object({\r\n      oldPassword: Yup.string()\r\n        .min(8, t(\"common.validations.min\", { size: 8 }))\r\n        .required(t(\"common.validations.required\")),\r\n      newPassword: Yup.string()\r\n        .min(8, t(\"common.validations.min\", { size: 8 }))\r\n        .required(t(\"common.validations.required\")),\r\n      confirmPassword: Yup.string()\r\n        .oneOf([Yup.ref(\"newPassword\")], t(\"common.validations.passwordMatch\"))\r\n        .required(t(\"common.validations.required\")),\r\n    }),\r\n    onSubmit: (values) =>\r\n      handleUpdatePassword(values.oldPassword, values.newPassword),\r\n  });\r\n\r\n  const handleUpdatePassword = async (\r\n    oldPassword: string,\r\n    newPassword: string\r\n  ) => {\r\n    updatePassword({ oldPassword, newPassword })\r\n      .then(() => {\r\n        formik.resetForm();\r\n        snackbar.success(t(\"profile.notifications.passwordChanged\"));\r\n      })\r\n      .catch(() => {\r\n        snackbar.error(t(\"common.errors.unexpected.subTitle\"));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit} noValidate>\r\n      <Card>\r\n        <CardHeader title={t(\"profile.password.title\")} />\r\n        <CardContent>\r\n          <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"oldPassword\"\r\n            label={t(\"profile.password.form.current.label\")}\r\n            type=\"password\"\r\n            id=\"oldPassword\"\r\n            autoComplete=\"current-password\"\r\n            disabled={isUpdating}\r\n            value={formik.values.oldPassword}\r\n            onChange={formik.handleChange}\r\n            error={\r\n              formik.touched.oldPassword && Boolean(formik.errors.oldPassword)\r\n            }\r\n            helperText={formik.touched.oldPassword && formik.errors.oldPassword}\r\n          />\r\n          <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"newPassword\"\r\n            label={t(\"profile.password.form.new.label\")}\r\n            type=\"password\"\r\n            id=\"newPassword\"\r\n            disabled={isUpdating}\r\n            value={formik.values.newPassword}\r\n            onChange={formik.handleChange}\r\n            error={\r\n              formik.touched.newPassword && Boolean(formik.errors.newPassword)\r\n            }\r\n            helperText={formik.touched.newPassword && formik.errors.newPassword}\r\n          />\r\n          <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"confirmPassword\"\r\n            label={t(\"profile.password.form.confirm.label\")}\r\n            type=\"password\"\r\n            id=\"confirmPassword\"\r\n            disabled={isUpdating}\r\n            value={formik.values.confirmPassword}\r\n            onChange={formik.handleChange}\r\n            error={\r\n              formik.touched.confirmPassword &&\r\n              Boolean(formik.errors.confirmPassword)\r\n            }\r\n            helperText={\r\n              formik.touched.confirmPassword && formik.errors.confirmPassword\r\n            }\r\n          />\r\n        </CardContent>\r\n        <CardActions>\r\n          <LoadingButton type=\"submit\" loading={isUpdating} variant=\"contained\">\r\n            {t(\"common.update\")}\r\n          </LoadingButton>\r\n        </CardActions>\r\n      </Card>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ProfilePassword;\r\n"],"sourceRoot":""}